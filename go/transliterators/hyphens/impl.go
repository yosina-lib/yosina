// Code generated by codegen. DO NOT EDIT.
package hyphens

import (
	_ "embed"
	"encoding/binary"

	"github.com/alecthomas/mph"

	yosina "github.com/yosina-lib/yosina/go"
)

//go:embed data.bin
var data []byte

var mapping *mph.CHD

func init() {
	var err error
	mapping, err = mph.Mmap(data)
	if err != nil {
		panic(err)
	}
}

type HyphensRecord [5][4]rune

type Mapping int

const (
	ASCII Mapping = iota
	Jisx0201
	Jisx0208_90
	Jisx0208_90_Windows
	Jisx0208_Verbatim
)

var DefaultPrecedence = []Mapping{Jisx0208_90}

type Options struct {
	Precedence []Mapping
}

type hyphensCharIterator struct {
	yosina.CharIterator
	precedence []Mapping
	offset     int
	c          *yosina.Char
	buf        *[4]rune
	bufOffset  int
}

func (i *hyphensCharIterator) Next() *yosina.Char {
	if i.buf != nil {
		if i.buf[i.bufOffset] != yosina.InvalidUnicodeValue {
			// Return buffered character
			cc := &yosina.Char{
				C:      [2]rune{i.buf[i.bufOffset], yosina.InvalidUnicodeValue},
				Offset: i.offset,
				Source: i.c,
			}
			i.bufOffset += 1
			i.offset += cc.RuneLen()
			return cc
		} else {
			i.buf = nil
		}
	}

	c := i.CharIterator.Next()
	if c == nil {
		return nil
	}

	// Build key for lookup
	var k [8]byte
	binary.LittleEndian.PutUint32(k[:4], uint32(c.C[0]))
	binary.LittleEndian.PutUint32(k[4:], uint32(c.C[1]))

	if v := mapping.Get(k[:]); v != nil {
		record := decodeHyphensRecord(v)
		if r := i.getReplacement(record); r != nil {
			i.buf = r
			i.c = c
			i.bufOffset = 1
			cc := &yosina.Char{
				C:      [2]rune{r[0], yosina.InvalidUnicodeValue},
				Offset: i.offset,
				Source: c,
			}
			i.offset += cc.RuneLen()
			return cc
		}
	}
	return c
}

func (i *hyphensCharIterator) getReplacement(record *HyphensRecord) *[4]rune {
	for _, m := range i.precedence {
		if record[m][0] != yosina.InvalidUnicodeValue {
			return &record[m]
		}
	}
	return nil
}

func decodeHyphensRecord(data []byte) *HyphensRecord {
	record := &HyphensRecord{}
	offset := 0

	// ASCII length (4 bytes) + data
	for i := 0; i < 4; i++ {
		record[ASCII][i] = rune(binary.LittleEndian.Uint32(data[offset:]))
		offset += 4
	}

	// Jisx0201 length (4 bytes) + data
	for i := 0; i < 4; i++ {
		record[Jisx0201][i] = rune(binary.LittleEndian.Uint32(data[offset:]))
		offset += 4
	}

	// Jisx0208_90 length (4 bytes) + data
	for i := 0; i < 4; i++ {
		record[Jisx0208_90][i] = rune(binary.LittleEndian.Uint32(data[offset:]))
		offset += 4
	}

	// Jisx0208_90_Windows length (4 bytes) + data
	for i := 0; i < 4; i++ {
		record[Jisx0208_90_Windows][i] = rune(binary.LittleEndian.Uint32(data[offset:]))
		offset += 4
	}

	// Jisx0208_Verbatim (4 bytes)
	for i := 0; i < 4; i++ {
		record[Jisx0208_Verbatim][i] = rune(binary.LittleEndian.Uint32(data[offset:]))
		offset += 4
	}

	return record
}

func Transliterate(i yosina.CharIterator, opts Options) yosina.CharIterator {
	precedence := DefaultPrecedence
	if len(opts.Precedence) > 0 {
		precedence = opts.Precedence
	}
	return &hyphensCharIterator{
		CharIterator: i,
		precedence:   precedence,
		offset:       0,
	}
}
