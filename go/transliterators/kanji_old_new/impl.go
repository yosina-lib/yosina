// Code generated by codegen. DO NOT EDIT.
package kanji_old_new

import (
	_ "embed"
	"encoding/binary"

	"github.com/alecthomas/mph"

	yosina "github.com/yosina-lib/yosina/go"
)

//go:embed data.bin
var data []byte

var mapping *mph.CHD

func init() {
	var err error
	mapping, err = mph.Mmap(data)
	if err != nil {
		panic(err)
	}
}

type simpleCharIterator struct {
	yosina.CharIterator
	offset int
}

func (i *simpleCharIterator) Next() *yosina.Char {
	c := i.CharIterator.Next()
	if c == nil {
		return nil
	}
	if c.IsSentinel() {
		return c
	}
	// Check if current character can be transliterated
	var k [8]byte
	binary.LittleEndian.PutUint32(k[:4], uint32(c.C[0]))
	binary.LittleEndian.PutUint32(k[4:], uint32(c.C[1]))
	if v := mapping.Get(k[:]); v != nil {
		cc := [2]rune{yosina.InvalidUnicodeValue, yosina.InvalidUnicodeValue}
		if len(v) >= 4 {
			cc[0] = rune(binary.LittleEndian.Uint32(v[:4]))
		}
		if len(v) >= 8 {
			cc[1] = rune(binary.LittleEndian.Uint32(v[4:]))
		}
		c = &yosina.Char{
			C:      cc,
			Offset: i.offset,
			Source: c,
		}
	} else {
		c = c.WithOffset(i.offset)
	}
	i.offset += c.RuneLen()
	return c
}

func Transliterate(i yosina.CharIterator) yosina.CharIterator {
	return &simpleCharIterator{i, 0}
}
