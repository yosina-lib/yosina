"""Tests for prolonged sound marks transliterator."""

from typing import Any

import pytest

from yosina.chars import build_char_list, from_chars
from yosina.transliterators.prolonged_sound_marks import Transliterator


@pytest.mark.parametrize(
    "name,input_str,expected,options",
    [
        # Basic hyphen replacements
        (
            "fullwidth hyphen-minus to prolonged sound mark",
            "„Ç§\uff0d„Éè„Éà\uff0d„É¥„Ç©",
            "„Ç§\u30fc„Éè„Éà\u30fc„É¥„Ç©",
            {},
        ),
        (
            "fullwidth hyphen-minus at end of word",
            "„Ç´„Éà„É©„É™\uff0d",
            "„Ç´„Éà„É©„É™\u30fc",
            {},
        ),
        (
            "ASCII hyphen-minus to prolonged sound mark",
            "„Ç§\u002d„Éè„Éà\u002d„É¥„Ç©",
            "„Ç§\u30fc„Éè„Éà\u30fc„É¥„Ç©",
            {},
        ),
        (
            "ASCII hyphen-minus at end of word",
            "„Ç´„Éà„É©„É™\u002d",
            "„Ç´„Éà„É©„É™\u30fc",
            {},
        ),
        # Prolonged marks between alphanumerics
        (
            "don't replace between prolonged sound marks",
            "1\u30fc\uff0d2\u30fc3",
            "1\u30fc\uff0d2\u30fc3",
            {},
        ),
        (
            "replace prolonged marks between alphanumerics",
            "1\u30fc\uff0d2\u30fc3",
            "1\u002d\u002d2\u002d3",
            {"replace_prolonged_marks_following_alnums": True},
        ),
        (
            "replace prolonged marks between fullwidth alphanumerics",
            "\uff11\u30fc\uff0d\uff12\u30fc\uff13",
            "\uff11\uff0d\uff0d\uff12\uff0d\uff13",
            {"replace_prolonged_marks_following_alnums": True},
        ),
        # Sokuon and hatsuon handling
        (
            "don't prolong sokuon by default",
            "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d",
            "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d",
            {},
        ),
        (
            "allow prolonged sokuon",
            "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d",
            "„Ç¶„ÉÉ\u30fc„Ç¶„É≥\uff0d",
            {"allow_prolonged_sokuon": True},
        ),
        (
            "allow prolonged hatsuon",
            "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d",
            "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\u30fc",
            {"allow_prolonged_hatsuon": True},
        ),
        (
            "allow both prolonged sokuon and hatsuon",
            "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d",
            "„Ç¶„ÉÉ\u30fc„Ç¶„É≥\u30fc",
            {"allow_prolonged_sokuon": True, "allow_prolonged_hatsuon": True},
        ),
        # Edge cases
        (
            "empty string",
            "",
            "",
            {},
        ),
        (
            "string with no hyphens",
            "„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå",
            "„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå",
            {},
        ),
        (
            "mixed hiragana and katakana with hyphens",
            "„ÅÇ„ÅÑ„ÅÜ\u002d„Åã„Åç„Åè\uff0d",
            "„ÅÇ„ÅÑ„ÅÜ\u30fc„Åã„Åç„Åè\u30fc",
            {},
        ),
        # Halfwidth katakana
        (
            "halfwidth katakana with hyphen",
            "ÔΩ±ÔΩ≤ÔΩ≥\u002d",
            "ÔΩ±ÔΩ≤ÔΩ≥\uff70",
            {},
        ),
        (
            "halfwidth katakana with fullwidth hyphen",
            "ÔΩ±ÔΩ≤ÔΩ≥\uff0d",
            "ÔΩ±ÔΩ≤ÔΩ≥\uff70",
            {},
        ),
        # Non-Japanese characters
        (
            "hyphen after non-Japanese character",
            "ABC\u002d123\uff0d",
            "ABC\u002d123\uff0d",
            {},
        ),
        # Multiple hyphens
        (
            "multiple hyphens in sequence",
            "„Ç¢\u002d\u002d\u002d„Ç§",
            "„Ç¢\u30fc\u30fc\u30fc„Ç§",
            {},
        ),
        # Various hyphen types
        (
            "various hyphen types",
            "„Ç¢\u002d„Ç§\u2010„Ç¶\u2014„Ç®\u2015„Ç™\u2212„Ç´\uff0d",
            "„Ç¢\u30fc„Ç§\u30fc„Ç¶\u30fc„Ç®\u30fc„Ç™\u30fc„Ç´\u30fc",
            {},
        ),
        # Prolonged sound marks remain unchanged
        (
            "prolonged sound mark remains unchanged (1)",
            "„Ç¢\u30fcÔº°\uff70Ôº¢",
            "„Ç¢\u30fcÔº°\uff70Ôº¢",
            {},
        ),
        (
            "prolonged sound mark remains unchanged (2)",
            "„Ç¢\u30fc„É≥\uff70„Ç¶",
            "„Ç¢\u30fc„É≥\uff70„Ç¶",
            {},
        ),
        # Mixed alphanumeric and Japanese with replace option
        (
            "mixed alphanumeric and Japanese with replace option",
            "A\u30fcB\uff0d„Ç¢„Ç§„Ç¶\u002d123\u30fc",
            "A\u002dB\u002d„Ç¢„Ç§„Ç¶\u30fc123\u002d",
            {"replace_prolonged_marks_following_alnums": True},
        ),
        # Hiragana sokuon
        (
            "hiragana sokuon with hyphen",
            "„ÅÇ„Å£\u002d",
            "„ÅÇ„Å£\u002d",
            {},
        ),
        (
            "hiragana sokuon with hyphen and allow prolonged sokuon",
            "„ÅÇ„Å£\u002d",
            "„ÅÇ„Å£\u30fc",
            {"allow_prolonged_sokuon": True},
        ),
        # Hiragana hatsuon
        (
            "hiragana hatsuon with hyphen",
            "„ÅÇ„Çì\u002d",
            "„ÅÇ„Çì\u002d",
            {},
        ),
        (
            "hiragana hatsuon with hyphen and allow prolonged hatsuon",
            "„ÅÇ„Çì\u002d",
            "„ÅÇ„Çì\u30fc",
            {"allow_prolonged_hatsuon": True},
        ),
        # Halfwidth katakana sokuon
        (
            "halfwidth katakana sokuon with hyphen",
            "ÔΩ≥ÔΩØ\u002d",
            "ÔΩ≥ÔΩØ\u002d",
            {},
        ),
        (
            "halfwidth katakana sokuon with hyphen and allow prolonged sokuon",
            "ÔΩ≥ÔΩØ\u002d",
            "ÔΩ≥ÔΩØ\uff70",
            {"allow_prolonged_sokuon": True},
        ),
        # Halfwidth katakana hatsuon
        (
            "halfwidth katakana hatsuon with hyphen",
            "ÔΩ≥Ôæù\u002d",
            "ÔΩ≥Ôæù\u002d",
            {},
        ),
        (
            "halfwidth katakana hatsuon with hyphen and allow prolonged hatsuon",
            "ÔΩ≥Ôæù\u002d",
            "ÔΩ≥Ôæù\uff70",
            {"allow_prolonged_hatsuon": True},
        ),
        # Hyphen at start
        (
            "hyphen at start of string",
            "\u002d„Ç¢„Ç§„Ç¶",
            "\u002d„Ç¢„Ç§„Ç¶",
            {},
        ),
        # Only hyphens
        (
            "only hyphens",
            "\u002d\uff0d\u2010\u2014\u2015\u2212",
            "\u002d\uff0d\u2010\u2014\u2015\u2212",
            {},
        ),
        # Special characters
        (
            "newline and tab characters",
            "„Ç¢\n\u002d\t„Ç§\uff0d",
            "„Ç¢\n\u002d\t„Ç§\u30fc",
            {},
        ),
        (
            "emoji with hyphens",
            "üòÄ\u002düòä\uff0d",
            "üòÄ\u002düòä\uff0d",
            {},
        ),
        (
            "unicode surrogates",
            "\U0001f600„Ç¢\u002d\U0001f601„Ç§\uff0d",
            "\U0001f600„Ç¢\u30fc\U0001f601„Ç§\u30fc",
            {},
        ),
        # Character type transitions
        (
            "hyphen between different character types",
            "„ÅÇ\u002d„Ç¢\u002dA\u002d1\u002dÔΩÅ\u002dÔºë",
            "„ÅÇ\u30fc„Ç¢\u30fcA\u002d1\u002dÔΩÅ\u002dÔºë",
            {},
        ),
        (
            "hyphen between different character types with replace option",
            "A\u002d1\u30fcÔΩÅ\uff70Ôºë",
            "A\u002d1\u002dÔΩÅ\uff0dÔºë",
            {"replace_prolonged_marks_following_alnums": True},
        ),
        # Skip already transliterated
        (
            "skip already transliterated chars option",
            "„Ç¢\u002d„Ç§\uff0d",
            "„Ç¢\u30fc„Ç§\u30fc",
            {"skip_already_transliterated_chars": True},
        ),
        # Vowel-ended characters
        (
            "hiragana vowel-ended characters",
            "„ÅÇ\u002d„Åã\u002d„Åï\u002d„Åü\u002d„Å™\u002d„ÅØ\u002d„Åæ\u002d„ÇÑ\u002d„Çâ\u002d„Çè\u002d",
            "„ÅÇ\u30fc„Åã\u30fc„Åï\u30fc„Åü\u30fc„Å™\u30fc„ÅØ\u30fc„Åæ\u30fc„ÇÑ\u30fc„Çâ\u30fc„Çè\u30fc",
            {},
        ),
        (
            "katakana vowel-ended characters",
            "„Ç¢\u002d„Ç´\u002d„Çµ\u002d„Çø\u002d„Éä\u002d„Éè\u002d„Éû\u002d„É§\u002d„É©\u002d„ÉØ\u002d",
            "„Ç¢\u30fc„Ç´\u30fc„Çµ\u30fc„Çø\u30fc„Éä\u30fc„Éè\u30fc„Éû\u30fc„É§\u30fc„É©\u30fc„ÉØ\u30fc",
            {},
        ),
        (
            "halfwidth katakana vowel-ended characters",
            "ÔΩ±\u002dÔΩ∂\u002dÔΩª\u002dÔæÄ\u002dÔæÖ\u002dÔæä\u002dÔæè\u002dÔæî\u002dÔæó\u002dÔæú\u002d",
            "ÔΩ±\uff70ÔΩ∂\uff70ÔΩª\uff70ÔæÄ\uff70ÔæÖ\uff70Ôæä\uff70Ôæè\uff70Ôæî\uff70Ôæó\uff70Ôæú\uff70",
            {},
        ),
        # Digits
        (
            "digits with hyphens",
            "0\u002d1\u002d2\u002d3\u002d4\u002d5\u002d6\u002d7\u002d8\u002d9\u002d",
            "0\u002d1\u002d2\u002d3\u002d4\u002d5\u002d6\u002d7\u002d8\u002d9\u002d",
            {},
        ),
        (
            "fullwidth digits with hyphens",
            "Ôºê\u002dÔºë\u002dÔºí\u002dÔºì\u002dÔºî\u002dÔºï\u002dÔºñ\u002dÔºó\u002dÔºò\u002dÔºô\u002d",
            "Ôºê\u002dÔºë\u002dÔºí\u002dÔºì\u002dÔºî\u002dÔºï\u002dÔºñ\u002dÔºó\u002dÔºò\u002dÔºô\u002d",
            {},
        ),
        (
            "fullwidth digits with hyphens with options",
            "Ôºê\u002dÔºë\u002dÔºí\u002dÔºì\u002dÔºî\u002dÔºï\u002dÔºñ\u002dÔºó\u002dÔºò\u002dÔºô\u002d",
            "Ôºê\uff0dÔºë\uff0dÔºí\uff0dÔºì\uff0dÔºî\uff0dÔºï\uff0dÔºñ\uff0dÔºó\uff0dÔºò\uff0dÔºô\uff0d",
            {"replace_prolonged_marks_following_alnums": True},
        ),
        # Alphabets
        (
            "alphabet with hyphens",
            "A\u002dB\u002dC\u002da\u002db\u002dc\u002d",
            "A\u002dB\u002dC\u002da\u002db\u002dc\u002d",
            {},
        ),
        (
            "alphabet with hyphens with options",
            "A\u002dB\u002dC\u002da\u002db\u002dc\u002d",
            "A\u002dB\u002dC\u002da\u002db\u002dc\u002d",
            {"replace_prolonged_marks_following_alnums": True},
        ),
        (
            "fullwidth alphabet with hyphens",
            "Ôº°\u002dÔº¢\u002dÔº£\u002dÔΩÅ\u002dÔΩÇ\u002dÔΩÉ\u002d",
            "Ôº°\u002dÔº¢\u002dÔº£\u002dÔΩÅ\u002dÔΩÇ\u002dÔΩÉ\u002d",
            {},
        ),
        (
            "fullwidth alphabet with hyphens with options",
            "Ôº°\u002dÔº¢\u002dÔº£\u002dÔΩÅ\u002dÔΩÇ\u002dÔΩÉ\u002d",
            "Ôº°\uff0dÔº¢\uff0dÔº£\uff0dÔΩÅ\uff0dÔΩÇ\uff0dÔΩÉ\uff0d",
            {"replace_prolonged_marks_following_alnums": True},
        ),
    ],
)
def test_prolonged_sound_marks(name: str, input_str: str, expected: str, options: dict[str, Any]) -> None:
    """Test prolonged sound mark replacement."""
    transliterator = Transliterator(**options)
    result = from_chars(transliterator(build_char_list(input_str)))
    assert result == expected, f"Failed test: {name}"
