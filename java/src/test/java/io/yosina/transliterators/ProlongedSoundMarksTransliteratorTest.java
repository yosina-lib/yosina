package io.yosina.transliterators;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import io.yosina.Chars;
import io.yosina.Transliterator;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

/** Tests for ProlongedSoundMarks transliterator. */
public class ProlongedSoundMarksTransliteratorTest {

    private String transliterate(String input, ProlongedSoundMarksTransliterator.Options options) {
        Transliterator transliterator = new ProlongedSoundMarksTransliterator(options);
        return transliterator.transliterate(Chars.of(input).iterator()).string();
    }

    private String transliterate(String input) {
        return transliterate(input, new ProlongedSoundMarksTransliterator.Options());
    }

    @Test
    public void testFullwidthHyphenMinusToProlongedSoundMark() {
        String input = "„Ç§\uff0d„Éè„Éà\uff0d„É¥„Ç©";
        String expected = "„Ç§\u30fc„Éè„Éà\u30fc„É¥„Ç©";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testFullwidthHyphenMinusAtEndOfWord() {
        String input = "„Ç´„Éà„É©„É™\uff0d";
        String expected = "„Ç´„Éà„É©„É™\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testAsciiHyphenMinusToProlongedSoundMark() {
        String input = "„Ç§\u002d„Éè„Éà\u002d„É¥„Ç©";
        String expected = "„Ç§\u30fc„Éè„Éà\u30fc„É¥„Ç©";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testAsciiHyphenMinusAtEndOfWord() {
        String input = "„Ç´„Éà„É©„É™\u002d";
        String expected = "„Ç´„Éà„É©„É™\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testDontReplaceBetweenProlongedSoundMarks() {
        String input = "1\u30fc\uff0d2\u30fc3";
        String expected = "1\u30fc\uff0d2\u30fc3";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testReplaceProlongedMarksBetweenAlphanumerics() {
        String input = "1\u30fc\uff0d2\u30fc3";
        String expected = "1\u002d\u002d2\u002d3";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, false, true);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testReplaceProlongedMarksBetweenFullwidthAlphanumerics() {
        String input = "\uff11\u30fc\uff0d\uff12\u30fc\uff13";
        String expected = "\uff11\uff0d\uff0d\uff12\uff0d\uff13";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, false, true);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testDontProlongSokuonByDefault() {
        String input = "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d";
        String expected = "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testAllowProlongedSokuon() {
        String input = "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d";
        String expected = "„Ç¶„ÉÉ\u30fc„Ç¶„É≥\uff0d";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, true, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testAllowProlongedHatsuon() {
        String input = "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d";
        String expected = "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\u30fc";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, true, false, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testAllowBothProlongedSokuonAndHatsuon() {
        String input = "„Ç¶„ÉÉ\uff0d„Ç¶„É≥\uff0d";
        String expected = "„Ç¶„ÉÉ\u30fc„Ç¶„É≥\u30fc";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, true, true, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testEmptyString() {
        assertEquals("", transliterate(""));
    }

    @Test
    public void testStringWithNoHyphens() {
        String input = "„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testMixedHiraganaAndKatakanaWithHyphens() {
        String input = "„ÅÇ„ÅÑ„ÅÜ\u002d„Åã„Åç„Åè\uff0d";
        String expected = "„ÅÇ„ÅÑ„ÅÜ\u30fc„Åã„Åç„Åè\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testHalfwidthKatakanaWithHyphen() {
        String input = "ÔΩ±ÔΩ≤ÔΩ≥\u002d";
        String expected = "ÔΩ±ÔΩ≤ÔΩ≥\uff70";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testHalfwidthKatakanaWithFullwidthHyphen() {
        String input = "ÔΩ±ÔΩ≤ÔΩ≥\uff0d";
        String expected = "ÔΩ±ÔΩ≤ÔΩ≥\uff70";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testHyphenAfterNonJapaneseCharacter() {
        String input = "ABC\u002d123\uff0d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testMultipleHyphensInSequence() {
        String input = "„Ç¢\u002d\u002d\u002d„Ç§";
        String expected = "„Ç¢\u30fc\u30fc\u30fc„Ç§";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testVariousHyphenTypes() {
        String input = "„Ç¢\u002d„Ç§\u2010„Ç¶\u2014„Ç®\u2015„Ç™\u2212„Ç´\uff0d";
        String expected = "„Ç¢\u30fc„Ç§\u30fc„Ç¶\u30fc„Ç®\u30fc„Ç™\u30fc„Ç´\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testProlongedSoundMarkRemainsUnchanged1() {
        String input = "„Ç¢\u30fcÔº°\uff70Ôº¢";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testProlongedSoundMarkRemainsUnchanged2() {
        String input = "„Ç¢\u30fc„É≥\uff70„Ç¶";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testMixedAlphanumericAndJapaneseWithReplaceOption() {
        String input = "A\u30fcB\uff0d„Ç¢„Ç§„Ç¶\u002d123\u30fc";
        String expected = "A\u002dB\u002d„Ç¢„Ç§„Ç¶\u30fc123\u002d";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, false, true);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testHiraganaSokuonWithHyphen() {
        String input = "„ÅÇ„Å£\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testHiraganaSokuonWithHyphenAndAllowProlongedSokuon() {
        String input = "„ÅÇ„Å£\u002d";
        String expected = "„ÅÇ„Å£\u30fc";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, true, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testHiraganaHatsuonWithHyphen() {
        String input = "„ÅÇ„Çì\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testHiraganaHatsuonWithHyphenAndAllowProlongedHatsuon() {
        String input = "„ÅÇ„Çì\u002d";
        String expected = "„ÅÇ„Çì\u30fc";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, true, false, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testHalfwidthKatakanaSokuonWithHyphen() {
        String input = "ÔΩ≥ÔΩØ\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testHalfwidthKatakanaSokuonWithHyphenAndAllowProlongedSokuon() {
        String input = "ÔΩ≥ÔΩØ\u002d";
        String expected = "ÔΩ≥ÔΩØ\uff70";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, true, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testHalfwidthKatakanaHatsuonWithHyphen() {
        String input = "ÔΩ≥Ôæù\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testHalfwidthKatakanaHatsuonWithHyphenAndAllowProlongedHatsuon() {
        String input = "ÔΩ≥Ôæù\u002d";
        String expected = "ÔΩ≥Ôæù\uff70";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, true, false, false);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testHyphenAtStartOfString() {
        String input = "\u002d„Ç¢„Ç§„Ç¶";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testOnlyHyphens() {
        String input = "\u002d\uff0d\u2010\u2014\u2015\u2212";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testNewlineAndTabCharacters() {
        String input = "„Ç¢\n\u002d\t„Ç§\uff0d";
        String expected = "„Ç¢\n\u002d\t„Ç§\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testEmojiWithHyphens() {
        String input = "üòÄ\u002düòä\uff0d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testUnicodeSurrogates() {
        String input = "\uD83D\uDE00„Ç¢\u002d\uD83D\uDE01„Ç§\uff0d";
        String expected = "\uD83D\uDE00„Ç¢\u30fc\uD83D\uDE01„Ç§\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testHyphenBetweenDifferentCharacterTypes() {
        String input = "„ÅÇ\u002d„Ç¢\u002dA\u002d1\u002dÔΩÅ\u002dÔºë";
        String expected = "„ÅÇ\u30fc„Ç¢\u30fcA\u002d1\u002dÔΩÅ\u002dÔºë";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testHyphenBetweenDifferentCharacterTypesWithReplaceOption() {
        String input = "A\u002d1\u30fcÔΩÅ\uff70Ôºë";
        String expected = "A\u002d1\u002dÔΩÅ\uff0dÔºë";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, false, true);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testHiraganaVowelEndedCharacters() {
        String input = "„ÅÇ\u002d„Åã\u002d„Åï\u002d„Åü\u002d„Å™\u002d„ÅØ\u002d„Åæ\u002d„ÇÑ\u002d„Çâ\u002d„Çè\u002d";
        String expected = "„ÅÇ\u30fc„Åã\u30fc„Åï\u30fc„Åü\u30fc„Å™\u30fc„ÅØ\u30fc„Åæ\u30fc„ÇÑ\u30fc„Çâ\u30fc„Çè\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testKatakanaVowelEndedCharacters() {
        String input = "„Ç¢\u002d„Ç´\u002d„Çµ\u002d„Çø\u002d„Éä\u002d„Éè\u002d„Éû\u002d„É§\u002d„É©\u002d„ÉØ\u002d";
        String expected = "„Ç¢\u30fc„Ç´\u30fc„Çµ\u30fc„Çø\u30fc„Éä\u30fc„Éè\u30fc„Éû\u30fc„É§\u30fc„É©\u30fc„ÉØ\u30fc";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testHalfwidthKatakanaVowelEndedCharacters() {
        String input = "ÔΩ±\u002dÔΩ∂\u002dÔΩª\u002dÔæÄ\u002dÔæÖ\u002dÔæä\u002dÔæè\u002dÔæî\u002dÔæó\u002dÔæú\u002d";
        String expected = "ÔΩ±\uff70ÔΩ∂\uff70ÔΩª\uff70ÔæÄ\uff70ÔæÖ\uff70Ôæä\uff70Ôæè\uff70Ôæî\uff70Ôæó\uff70Ôæú\uff70";
        assertEquals(expected, transliterate(input));
    }

    @Test
    public void testDigitsWithHyphens() {
        String input = "0\u002d1\u002d2\u002d3\u002d4\u002d5\u002d6\u002d7\u002d8\u002d9\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testFullwidthDigitsWithHyphens() {
        String input = "Ôºê\u002dÔºë\u002dÔºí\u002dÔºì\u002dÔºî\u002dÔºï\u002dÔºñ\u002dÔºó\u002dÔºò\u002dÔºô\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testFullwidthDigitsWithHyphensWithOptions() {
        String input = "Ôºê\u002dÔºë\u002dÔºí\u002dÔºì\u002dÔºî\u002dÔºï\u002dÔºñ\u002dÔºó\u002dÔºò\u002dÔºô\u002d";
        String expected = "Ôºê\uff0dÔºë\uff0dÔºí\uff0dÔºì\uff0dÔºî\uff0dÔºï\uff0dÔºñ\uff0dÔºó\uff0dÔºò\uff0dÔºô\uff0d";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, false, true);
        assertEquals(expected, transliterate(input, options));
    }

    @Test
    public void testAlphabetWithHyphens() {
        String input = "A\u002dB\u002dC\u002da\u002db\u002dc\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testAlphabetWithHyphensWithOptions() {
        String input = "A\u002dB\u002dC\u002da\u002db\u002dc\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testFullwidthAlphabetWithHyphens() {
        String input = "Ôº°\u002dÔº¢\u002dÔº£\u002dÔΩÅ\u002dÔΩÇ\u002dÔΩÉ\u002d";
        assertEquals(input, transliterate(input));
    }

    @Test
    public void testFullwidthAlphabetWithHyphensWithOptions() {
        String input = "Ôº°\u002dÔº¢\u002dÔº£\u002dÔΩÅ\u002dÔΩÇ\u002dÔΩÉ\u002d";
        String expected = "Ôº°\uff0dÔº¢\uff0dÔº£\uff0dÔΩÅ\uff0dÔΩÇ\uff0dÔΩÉ\uff0d";
        ProlongedSoundMarksTransliterator.Options options =
                new ProlongedSoundMarksTransliterator.Options(false, false, false, true);
        assertEquals(expected, transliterate(input, options));
    }

    private static Stream<Arguments> provideTestCases() {
        return Stream.of(
                // Test consecutive prolonged marks replacement
                Arguments.of(
                        "consecutive prolonged marks with alphanumerics",
                        "A\u30fc\u30fc\u30fcB",
                        "A\u002d\u002d\u002dB",
                        new ProlongedSoundMarksTransliterator.Options(false, false, false, true)),
                // Test mixed width consistency
                Arguments.of(
                        "mixed width characters maintain consistency",
                        "ÔΩ±\uff0d„Ç¢\u002d",
                        "ÔΩ±\uff70„Ç¢\u30fc",
                        new ProlongedSoundMarksTransliterator.Options()),
                Arguments.of(
                        "prolonged mark followed by hyphen",
                        "„Ç¢\u30fc\u002d",
                        "„Ç¢\u30fc\u30fc",
                        new ProlongedSoundMarksTransliterator.Options()),
                // Test with skip already transliterated
                Arguments.of(
                        "skip already transliterated characters",
                        "„Ç¢\u002d„Ç§\uff0d",
                        "„Ç¢\u30fc„Ç§\u30fc",
                        new ProlongedSoundMarksTransliterator.Options(true, false, false, false)));
    }

    @ParameterizedTest
    @MethodSource("provideTestCases")
    public void testParameterizedCases(
            String description,
            String input,
            String expected,
            ProlongedSoundMarksTransliterator.Options options) {
        assertEquals(expected, transliterate(input, options), "Failed test: " + description);
    }

    @Test
    public void testProlongedSoundMarksTransliteratorOptionsEquals() {
        ProlongedSoundMarksTransliterator.Options options1 =
                new ProlongedSoundMarksTransliterator.Options(true, false, true, false);
        ProlongedSoundMarksTransliterator.Options options2 =
                new ProlongedSoundMarksTransliterator.Options(true, false, true, false);
        ProlongedSoundMarksTransliterator.Options options3 =
                new ProlongedSoundMarksTransliterator.Options(false, false, true, false);

        assertEquals(options1, options2);
        assertNotEquals(options1, options3);
        assertEquals(options1.hashCode(), options2.hashCode());
        assertNotEquals(options1.hashCode(), options3.hashCode());
    }
}
