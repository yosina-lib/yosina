use crate::char::{Char, CharPool};
use crate::transliterator::{
    TransliterationError, Transliterator, TransliteratorFactory, TransliteratorFactoryError,
};
use crate::transliterators::SimpleTransliterator;
static MATHEMATICALALPHANUMERICS_MAPPINGS: phf::Map<&'static str, &'static str> = phf::phf_map! { "𝒇" => "f" , "𝖉" => "d" , "𝓽" => "t" , "𝚈" => "Y" , "𝑱" => "J" , "𝔜" => "Y" , "𝕬" => "A" , "𝖅" => "Z" , "𝗦" => "S" , "𝑑" => "d" , "𝖌" => "g" , "𝖚" => "u" , "𝖤" => "E" , "𝐎" => "O" , "Ω" => "Ω" , "𝖳" => "T" , "𝗍" => "t" , "𝗰" => "c" , "𝖛" => "v" , "𝒅" => "d" , "𝖲" => "S" , "𝙴" => "E" , "𝕏" => "X" , "𝑓" => "f" , "𝔲" => "u" , "ℚ" => "Q" , "𝘂" => "u" , "𝖏" => "j" , "𝐅" => "F" , "𝙕" => "Z" , "𝗟" => "L" , "𝑀" => "M" , "𝓅" => "p" , "𝘪" => "i" , "𝙤" => "o" , "ℴ" => "o" , "𝘕" => "N" , "ⅈ" => "i" , "𝗲" => "e" , "𝗳" => "f" , "𝙚" => "e" , "𝙪" => "u" , "𝖕" => "p" , "𝙓" => "X" , "𝘍" => "F" , "𝟹" => "3" , "𝘻" => "z" , "𝟽" => "7" , "𝚑" => "h" , "𝔧" => "j" , "𝓗" => "H" , "𝒈" => "g" , "𝗐" => "w" , "𝙺" => "K" , "𝒋" => "j" , "𝒎" => "m" , "𝑔" => "g" , "ℽ" => "γ" , "𝘮" => "m" , "𝒳" => "X" , "𝘷" => "v" , "𝐇" => "H" , "𝗭" => "Z" , "𝖠" => "A" , "𝖼" => "c" , "𝙟" => "j" , "𝓭" => "d" , "𝐹" => "F" , "𝐛" => "b" , "𝓙" => "J" , "𝐜" => "c" , "𝙩" => "t" , "𝓔" => "E" , "𝙰" => "A" , "𝔭" => "p" , "𝔵" => "x" , "𝐳" => "z" , "𝑷" => "P" , "𝒗" => "v" , "𝗿" => "r" , "𝓘" => "I" , "𝒵" => "Z" , "𝗞" => "K" , "𝘵" => "t" , "𝑭" => "F" , "𝓜" => "M" , "𝔎" => "K" , "𝕻" => "P" , "𝐢" => "i" , "𝖜" => "w" , "𝔘" => "U" , "𝗬" => "Y" , "𝙂" => "G" , "𝔔" => "Q" , "𝕁" => "J" , "𝐪" => "q" , "𝖍" => "h" , "𝖞" => "y" , "𝟡" => "9" , "𝟣" => "1" , "𝟤" => "2" , "𝓖" => "G" , "𝘴" => "s" , "𝔥" => "h" , "𝓏" => "z" , "𝖓" => "n" , "𝗴" => "g" , "𝕾" => "S" , "𝖝" => "x" , "𝑬" => "E" , "𝟨" => "6" , "𝒪" => "O" , "𝑡" => "t" , "𝑜" => "o" , "𝓶" => "m" , "𝘛" => "T" , "𝒷" => "b" , "𝔂" => "y" , "𝒕" => "t" , "𝚂" => "S" , "𝑖" => "i" , "𝙲" => "C" , "𝓑" => "B" , "𝕧" => "v" , "𝙊" => "O" , "𝓤" => "U" , "ℎ" => "h" , "𝖨" => "I" , "𝗁" => "h" , "𝐏" => "P" , "𝓫" => "b" , "K" => "K" , "𝖆" => "a" , "𝐕" => "V" , "𝐖" => "W" , "𝒚" => "y" , "𝕦" => "u" , "𝐊" => "K" , "𝐱" => "x" , "𝕶" => "K" , "𝒍" => "l" , "ℐ" => "I" , "𝘁" => "t" , "𝙈" => "M" , "𝓁" => "l" , "𝙋" => "P" , "𝐲" => "y" , "𝟝" => "5" , "ⅇ" => "e" , "∑" => "Σ" , "𝓪" => "a" , "𝕟" => "n" , "𝓾" => "u" , "𝚐" => "g" , "𝕤" => "s" , "𝙅" => "J" , "𝘅" => "x" , "𝚗" => "n" , "𝘗" => "P" , "𝕷" => "L" , "𝙞" => "i" , "𝐻" => "H" , "𝟬" => "0" , "𝐴" => "A" , "𝐰" => "w" , "𝚖" => "m" , "𝖡" => "B" , "𝖫" => "L" , "𝓸" => "o" , "𝟲" => "6" , "ℭ" => "C" , "𝒬" => "Q" , "𝐬" => "s" , "𝒛" => "z" , "𝐨" => "o" , "𝗹" => "l" , "𝑌" => "Y" , "𝔶" => "y" , "𝗪" => "W" , "𝕒" => "a" , "𝕜" => "k" , "𝙔" => "Y" , "𝒁" => "Z" , "𝐡" => "h" , "𝑿" => "X" , "𝓼" => "s" , "𝕚" => "i" , "𝚅" => "V" , "𝚟" => "v" , "𝐾" => "K" , "𝟖" => "8" , "𝕃" => "L" , "𝔚" => "W" , "𝒙" => "x" , "𝖮" => "O" , "𝘡" => "Z" , "𝗓" => "z" , "𝔍" => "J" , "𝗵" => "h" , "𝗡" => "N" , "𝔞" => "a" , "𝑥" => "x" , "𝕍" => "V" , "𝒢" => "G" , "𝓕" => "F" , "𝚉" => "Z" , "𝓥" => "V" , "𝔾" => "G" , "𝔑" => "N" , "𝟿" => "9" , "𝟰" => "4" , "𝙵" => "F" , "𝕘" => "g" , "𝕠" => "o" , "𝟸" => "2" , "𝔅" => "B" , "𝓷" => "n" , "𝙡" => "l" , "𝐓" => "T" , "𝒲" => "W" , "𝕂" => "K" , "𝚌" => "c" , "𝙌" => "Q" , "𝒦" => "K" , "𝓐" => "A" , "𝕊" => "S" , "𝔼" => "E" , "𝔩" => "l" , "𝐑" => "R" , "𝚠" => "w" , "𝘖" => "O" , "𝓰" => "g" , "𝓞" => "O" , "𝘟" => "X" , "𝚇" => "X" , "𝚕" => "l" , "𝑗" => "j" , "𝚘" => "o" , "𝐐" => "Q" , "𝚄" => "U" , "𝒮" => "S" , "𝐔" => "U" , "𝔁" => "x" , "𝐸" => "E" , "𝖀" => "U" , "𝗖" => "C" , "𝘊" => "C" , "𝘹" => "x" , "𝖵" => "V" , "𝓩" => "Z" , "𝓲" => "i" , "𝘞" => "W" , "ℌ" => "H" , "𝒂" => "a" , "𝓮" => "e" , "𝖖" => "q" , "𝚚" => "q" , "𝙁" => "F" , "𝘃" => "v" , "𝔄" => "A" , "𝕪" => "y" , "𝙄" => "I" , "𝖃" => "X" , "𝗚" => "G" , "𝚓" => "j" , "𝖸" => "Y" , "𝕞" => "m" , "𝟾" => "8" , "𝗮" => "a" , "𝘚" => "S" , "𝔟" => "b" , "𝒔" => "s" , "𝔬" => "o" , "𝑪" => "C" , "𝑂" => "O" , "𝔃" => "z" , "𝑮" => "G" , "𝔰" => "s" , "𝔈" => "E" , "𝗶" => "i" , "𝟙" => "1" , "𝓹" => "p" , "𝕰" => "E" , "𝑐" => "c" , "𝒄" => "c" , "𝘲" => "q" , "𝒽" => "h" , "𝖿" => "f" , "𝐆" => "G" , "𝕭" => "B" , "𝘬" => "k" , "𝓱" => "h" , "𝙀" => "E" , "𝒯" => "T" , "ⅆ" => "d" , "𝐽" => "J" , "𝙻" => "L" , "𝘆" => "y" , "𝓬" => "c" , "𝙜" => "g" , "𝔴" => "w" , "𝖘" => "s" , "𝓛" => "L" , "𝓝" => "N" , "𝙙" => "d" , "𝚢" => "y" , "𝑊" => "W" , "𝑹" => "R" , "ℜ" => "R" , "𝒖" => "u" , "𝔫" => "n" , "𝒩" => "N" , "𝘿" => "D" , "𝒰" => "U" , "𝑘" => "k" , "𝙘" => "c" , "𝙆" => "K" , "𝕆" => "O" , "𝒉" => "h" , "𝘢" => "a" , "𝙯" => "z" , "𝕀" => "I" , "𝒱" => "V" , "𝓵" => "l" , "𝕡" => "p" , "𝚡" => "x" , "𝟢" => "0" , "𝟮" => "2" , "𝔊" => "G" , "𝘺" => "y" , "𝐞" => "e" , "𝗃" => "j" , "⅀" => "Σ" , "𝓣" => "T" , "𝐣" => "j" , "𝔽" => "F" , "𝘸" => "w" , "𝕗" => "f" , "𝙝" => "h" , "𝐋" => "L" , "𝑃" => "P" , "𝙗" => "b" , "𝙢" => "m" , "𝙭" => "x" , "𝟜" => "4" , "𝗜" => "I" , "𝙳" => "D" , "𝒀" => "Y" , "𝒫" => "P" , "𝕿" => "T" , "𝑆" => "S" , "𝐤" => "k" , "𝔣" => "f" , "𝑒" => "e" , "𝒞" => "C" , "𝑽" => "V" , "𝑢" => "u" , "𝖰" => "Q" , "𝗥" => "R" , "𝐝" => "d" , "𝐦" => "m" , "𝘶" => "u" , "𝚙" => "p" , "𝚃" => "T" , "𝟒" => "4" , "𝓒" => "C" , "𝟻" => "5" , "𝙖" => "a" , "𝖋" => "f" , "𝗛" => "H" , "𝘌" => "E" , "𝔗" => "T" , "𝐉" => "J" , "𝑸" => "Q" , "𝐀" => "A" , "𝗫" => "X" , "𝓦" => "W" , "ℓ" => "l" , "𝐒" => "S" , "𝖺" => "a" , "𝖪" => "K" , "𝗘" => "E" , "𝘀" => "s" , "𝖐" => "k" , "𝖦" => "G" , "𝖷" => "X" , "𝙶" => "G" , "𝒆" => "e" , "𝘯" => "n" , "𝚝" => "t" , "𝘰" => "o" , "𝙱" => "B" , "𝕢" => "q" , "𝗻" => "n" , "𝙦" => "q" , "𝖢" => "C" , "𝔛" => "X" , "𝖊" => "e" , "ⅅ" => "D" , "𝗺" => "m" , "𝕓" => "b" , "𝕔" => "c" , "𝕽" => "R" , "𝐚" => "a" , "𝐮" => "u" , "𝒹" => "d" , "𝒊" => "i" , "𝓿" => "v" , "𝒾" => "i" , "𝟟" => "7" , "𝒜" => "A" , "𝙧" => "r" , "𝗈" => "o" , "𝗽" => "p" , "𝒐" => "o" , "𝗝" => "J" , "𝙇" => "L" , "𝘨" => "g" , "𝒸" => "c" , "𝑲" => "K" , "𝑵" => "N" , "𝙐" => "U" , "ℋ" => "H" , "𝐌" => "M" , "𝗂" => "i" , "𝗠" => "M" , "𝘎" => "G" , "𝘠" => "Y" , "𝔀" => "w" , "𝗾" => "q" , "𝓃" => "n" , "𝘳" => "r" , "𝚜" => "s" , "𝚛" => "r" , "𝕙" => "h" , "𝖧" => "H" , "𝖬" => "M" , "𝘉" => "B" , "𝙒" => "W" , "𝕥" => "t" , "𝕩" => "x" , "𝔇" => "D" , "𝟩" => "7" , "𝟶" => "0" , "𝖣" => "D" , "𝑺" => "S" , "𝒃" => "b" , "𝑼" => "U" , "𝖻" => "b" , "𝘋" => "D" , "𝘦" => "e" , "𝘱" => "p" , "𝙏" => "T" , "𝖔" => "o" , "𝟕" => "7" , "𝟗" => "9" , "𝑉" => "V" , "𝕴" => "I" , "ℳ" => "M" , "ℛ" => "R" , "𝘘" => "Q" , "𝙉" => "N" , "𝗕" => "B" , "𝗔" => "A" , "𝑋" => "X" , "𝚀" => "Q" , "𝑅" => "R" , "𝐧" => "n" , "𝑚" => "m" , "𝙛" => "f" , "𝟠" => "8" , "𝟯" => "3" , "ℙ" => "P" , "𝓍" => "x" , "𝐩" => "p" , "𝓊" => "u" , "𝑩" => "B" , "𝔤" => "g" , "𝐶" => "C" , "𝕄" => "M" , "𝕲" => "G" , "ℒ" => "L" , "𝙽" => "N" , "𝐂" => "C" , "ℼ" => "π" , "𝟵" => "9" , "𝐺" => "G" , "𝔙" => "V" , "𝗷" => "j" , "𝓆" => "q" , "𝓇" => "r" , "𝗧" => "T" , "𝙫" => "v" , "𝚒" => "i" , "𝙍" => "R" , "𝐿" => "L" , "𝟓" => "5" , "𝟪" => "8" , "𝘼" => "A" , "𝟺" => "4" , "𝙃" => "H" , "𝐭" => "t" , "𝖒" => "m" , "𝟚" => "2" , "𝑧" => "z" , "𝗗" => "D" , "𝙨" => "s" , "𝗌" => "s" , "𝗆" => "m" , "𝕛" => "j" , "𝑫" => "D" , "𝕨" => "w" , "𝑈" => "U" , "𝔏" => "L" , "𝗤" => "Q" , "𝕸" => "M" , "𝖑" => "l" , "𝗎" => "u" , "ℕ" => "N" , "𝔳" => "v" , "𝘧" => "f" , "𝟥" => "3" , "𝘓" => "L" , "𝖴" => "U" , "𝙑" => "V" , "𝙷" => "H" , "𝓯" => "f" , "𝚏" => "f" , "𝟎" => "0" , "𝐘" => "Y" , "𝒿" => "j" , "𝔦" => "i" , "𝘇" => "z" , "𝓀" => "k" , "𝑨" => "A" , "𝐠" => "g" , "𝑇" => "T" , "𝓳" => "j" , "𝔡" => "d" , "ℰ" => "E" , "𝗨" => "U" , "𝟱" => "5" , "𝓈" => "s" , "𝔷" => "z" , "𝔓" => "P" , "𝒓" => "r" , "𝑏" => "b" , "𝘩" => "h" , "ℬ" => "B" , "𝒴" => "Y" , "𝕮" => "C" , "𝐗" => "X" , "𝘙" => "R" , "𝑾" => "W" , "𝙠" => "k" , "𝘾" => "C" , "𝔮" => "q" , "𝔯" => "r" , "𝔐" => "M" , "𝖇" => "b" , "𝓓" => "D" , "𝗏" => "v" , "𝖱" => "R" , "𝔠" => "c" , "𝕫" => "z" , "𝟳" => "7" , "𝔖" => "S" , "𝒟" => "D" , "𝚆" => "W" , "𝗋" => "r" , "𝓨" => "Y" , "𝓺" => "q" , "𝑙" => "l" , "ℝ" => "R" , "𝔒" => "O" , "𝔉" => "F" , "𝐼" => "I" , "𝑄" => "Q" , "𝖎" => "i" , "𝙥" => "p" , "𝟴" => "8" , "𝗣" => "P" , "𝓟" => "P" , "𝘑" => "J" , "𝘝" => "V" , "𝚁" => "R" , "𝑛" => "n" , "𝔻" => "D" , "𝐵" => "B" , "𝑍" => "Z" , "𝖭" => "N" , "𝗩" => "V" , "𝕎" => "W" , "𝑝" => "p" , "𝑞" => "q" , "𝖥" => "F" , "𝑣" => "v" , "𝚊" => "a" , "𝑻" => "T" , "𝕳" => "H" , "𝚍" => "d" , "𝚣" => "z" , "𝑰" => "I" , "𝟧" => "5" , "𝘒" => "K" , "𝚞" => "u" , "𝙼" => "M" , "𝕼" => "Q" , "𝘄" => "w" , "𝓂" => "m" , "𝖈" => "c" , "𝖽" => "d" , "𝗸" => "k" , "ℾ" => "Γ" , "𝐟" => "f" , "𝕵" => "J" , "𝟫" => "9" , "𝑯" => "H" , "𝒏" => "n" , "𝕝" => "l" , "𝑁" => "N" , "𝘫" => "j" , "𝒘" => "w" , "𝘭" => "l" , "𝓢" => "S" , "𝓎" => "y" , "𝖁" => "V" , "𝚎" => "e" , "ℑ" => "I" , "𝓡" => "R" , "𝒻" => "f" , "𝐄" => "E" , "𝑟" => "r" , "𝒑" => "p" , "𝘏" => "H" , "𝖾" => "e" , "𝓠" => "Q" , "𝟼" => "6" , "𝘐" => "I" , "𝑴" => "M" , "𝖂" => "W" , "𝟞" => "6" , "𝙮" => "y" , "𝖟" => "z" , "𝓉" => "t" , "𝑠" => "s" , "𝒥" => "J" , "𝗇" => "n" , "𝖹" => "Z" , "𝙸" => "I" , "𝗊" => "q" , "𝘤" => "c" , "𝗯" => "b" , "𝕕" => "d" , "𝕣" => "r" , "𝐷" => "D" , "𝐙" => "Z" , "𝓧" => "X" , "𝗉" => "p" , "𝗒" => "y" , "𝙬" => "w" , "𝖗" => "r" , "𝟷" => "1" , "𝚋" => "b" , "ℊ" => "g" , "𝖄" => "Y" , "ℨ" => "Z" , "𝕺" => "O" , "𝑶" => "O" , "𝖩" => "J" , "𝐯" => "v" , "𝕱" => "F" , "𝒌" => "k" , "𝗄" => "k" , "𝓌" => "w" , "𝔨" => "k" , "𝙎" => "S" , "𝗀" => "g" , "𝓴" => "k" , "𝟏" => "1" , "𝐃" => "D" , "𝘈" => "A" , "𝔹" => "B" , "𝟦" => "4" , "𝙣" => "n" , "𝐈" => "I" , "𝗙" => "F" , "𝕋" => "T" , "𝒒" => "q" , "𝓋" => "v" , "𝖶" => "W" , "𝕌" => "U" , "𝟘" => "0" , "𝐁" => "B" , "𝐍" => "N" , "𝟔" => "6" , "𝗢" => "O" , "𝟐" => "2" , "𝘜" => "U" , "𝟛" => "3" , "𝕖" => "e" , "𝓚" => "K" , "ℂ" => "C" , "𝑦" => "y" , "𝟭" => "1" , "𝗑" => "x" , "𝘣" => "b" , "ℤ" => "Z" , "ⅉ" => "j" , "𝖯" => "P" , "𝖙" => "t" , "𝑎" => "a" , "ℍ" => "H" , "𝙾" => "O" , "ℯ" => "e" , "𝔸" => "A" , "𝕐" => "Y" , "𝘽" => "B" , "ℿ" => "Π" , "𝕹" => "N" , "𝔢" => "e" , "𝑳" => "L" , "ℱ" => "F" , "𝐫" => "r" , "𝒶" => "a" , "𝙿" => "P" , "𝗼" => "o" , "𝕯" => "D" , "𝙹" => "J" , "𝐥" => "l" , "𝑤" => "w" , "𝗱" => "d" , "𝘥" => "d" , "𝗅" => "l" , "𝚔" => "k" , "𝟑" => "3" , "𝔱" => "t" , "𝘔" => "M" , "𝔪" => "m" , "𝓻" => "r" };
pub struct MathematicalAlphanumericsTransliterator {
    inner: SimpleTransliterator,
}
impl MathematicalAlphanumericsTransliterator {
    #[allow(clippy::new_without_default)]
    pub fn new() -> Self {
        Self {
            inner: SimpleTransliterator::new(&MATHEMATICALALPHANUMERICS_MAPPINGS),
        }
    }
}
impl Transliterator for MathematicalAlphanumericsTransliterator {
    fn transliterate<'a, 'b>(
        &self,
        pool: &mut CharPool<'a, 'b>,
        input: &[&'a Char<'a, 'b>],
    ) -> Result<Vec<&'a Char<'a, 'b>>, TransliterationError> {
        self.inner.transliterate(pool, input)
    }
}
pub struct MathematicalAlphanumericsTransliteratorFactory;
impl MathematicalAlphanumericsTransliteratorFactory {
    #[allow(clippy::new_without_default)]
    pub fn new() -> Self {
        Self
    }
}
impl TransliteratorFactory for MathematicalAlphanumericsTransliteratorFactory {
    fn new_transliterator(&self) -> Result<Box<dyn Transliterator>, TransliteratorFactoryError> {
        Ok(Box::new(MathematicalAlphanumericsTransliterator::new()))
    }
}
