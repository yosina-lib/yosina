name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      csharp: ${{ steps.changes.outputs.csharp }}
      dart: ${{ steps.changes.outputs.dart }}
      go: ${{ steps.changes.outputs.go }}
      java: ${{ steps.changes.outputs.java }}
      javascript: ${{ steps.changes.outputs.javascript }}
      php: ${{ steps.changes.outputs.php }}
      python: ${{ steps.changes.outputs.python }}
      ruby: ${{ steps.changes.outputs.ruby }}
      rust: ${{ steps.changes.outputs.rust }}
      swift: ${{ steps.changes.outputs.swift }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          csharp:
            - '.github/workflows/**'
            - 'csharp/**'
          dart:
            - '.github/workflows/**'
            - 'dart/**'
          go:
            - '.github/workflows/**'
            - 'go/**'
          java:
            - '.github/workflows/**'
            - 'java/**'
          javascript:
            - '.github/workflows/**'
            - 'javascript/**'
          php:
            - '.github/workflows/**'
            - 'php/**'
          python:
            - '.github/workflows/**'
            - 'python/**'
          ruby:
            - '.github/workflows/**'
            - 'ruby/**'
          rust:
            - '.github/workflows/**'
            - 'rust/**'
          swift:
            - '.github/workflows/**'
            - 'swift/**'

  csharp:
    name: C#
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.csharp == 'true' }}
    defaults:
      run:
        working-directory: ./csharp
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Restore tools
      run: dotnet tool restore
      
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Build with code analysis
      run: dotnet build --no-restore --configuration Release /p:RunAnalyzersDuringBuild=true /p:TreatWarningsAsErrors=true
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

  dart:
    name: Dart
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.dart == 'true' }}
    defaults:
      run:
        working-directory: ./dart
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
        
    - name: Install dependencies
      run: dart pub get
      
    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze code
      run: dart analyze --fatal-infos
      
    - name: Run tests
      run: dart test

  go:
    name: Go
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    defaults:
      run:
        working-directory: ./go
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache-dependency-path: |
          go/go.sum
        
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test ./...
      
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run vet
      run: go vet ./...

  java:
    name: Java
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.java == 'true' }}
    defaults:
      run:
        working-directory: ./java
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      
    - name: Run tests
      run: gradle test
      
    - name: Check formatting
      run: gradle check && gradle spotlessCheck

  javascript:
    name: JavaScript/TypeScript
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.javascript == 'true' }}
    defaults:
      run:
        working-directory: ./javascript
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.17.0'
        cache: 'npm'
        cache-dependency-path: './javascript/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Check formatting
      run: npm run check
      
    - name: Run tests
      run: npm test
      
    - name: Build
      run: npm run build

  php:
    name: PHP
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.php == 'true' }}
    defaults:
      run:
        working-directory: ./php
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl
        tools: composer
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Run PHPStan
      run: composer analyse
      
    - name: Check code style
      run: composer cs-check
      
    - name: Run tests
      run: composer test

  python:
    name: Python
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    defaults:
      run:
        working-directory: ./python
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Run linter
      run: uv run ruff check
      
    - name: Check formatting
      run: uv run ruff format --check
      
    - name: Run type checker
      run: uv run pyright
      
    - name: Run tests
      run: uv run pytest

  ruby:
    name: Ruby
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.ruby == 'true' }}
    defaults:
      run:
        working-directory: ./ruby
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: ./ruby
        
    - name: Run linter
      run: bundle exec rubocop
      
    - name: Run tests
      run: bundle exec rake test

  rust:
    name: Rust
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    defaults:
      run:
        working-directory: ./rust
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets -- -D warnings
      
    - name: Run tests
      run: cargo test
      
    - name: Build
      run: cargo build --release

  swift:
    name: Swift
    runs-on: macos-latest
    needs: changes
    if: ${{ needs.changes.outputs.swift == 'true' }}
    defaults:
      run:
        working-directory: ./swift
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.1'
        
    - name: Check formatting
      run: swift-format lint --recursive Sources Tests
      continue-on-error: true
      
    - name: Build
      run: swift build
      
    - name: Run tests
      run: swift test